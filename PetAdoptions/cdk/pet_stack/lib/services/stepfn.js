"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PetAdoptionsStepFn = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const sfn = require("aws-cdk-lib/aws-stepfunctions");
const tasks = require("aws-cdk-lib/aws-stepfunctions-tasks");
const lambda = require("aws-cdk-lib/aws-lambda");
const pythonlambda = require("@aws-cdk/aws-lambda-python-alpha");
const iam = require("aws-cdk-lib/aws-iam");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const constructs_1 = require("constructs");
class PetAdoptionsStepFn extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        var lambdaRole = new iam.Role(this, 'stepfnlambdaexecutionrole', {
            assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
            managedPolicies: [
                iam.ManagedPolicy.fromManagedPolicyArn(this, 'first', 'arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess'),
                iam.ManagedPolicy.fromManagedPolicyArn(this, 'second', 'arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess'),
                iam.ManagedPolicy.fromManagedPolicyArn(this, 'third', 'arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess'),
                iam.ManagedPolicy.fromManagedPolicyArn(this, 'fourth', 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'),
                iam.ManagedPolicy.fromManagedPolicyArn(this, 'fifth', 'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'),
                iam.ManagedPolicy.fromManagedPolicyArn(this, 'sixth', 'arn:aws:iam::aws:policy/AmazonPrometheusRemoteWriteAccess')
            ]
        });
        var layerArn = "arn:aws:lambda:" + process.env.CDK_DEFAULT_REGION + ":580247275435:layer:LambdaInsightsExtension:38";
        var layer = lambda.LayerVersion.fromLayerVersionArn(this, `LambdaInsights`, layerArn);
        var adotLayerArn = "arn:aws:lambda:" + process.env.CDK_DEFAULT_REGION + ":901920570463:layer:aws-otel-python-amd64-ver-1-19-0:2";
        var adotlayer = lambda.LayerVersion.fromLayerVersionArn(this, 'otelPythonLambdaLayer', adotLayerArn);
        var layers = [layer, adotlayer];
        const readDynamoDB_Step = new tasks.LambdaInvoke(this, 'ReadDynamoDB', {
            lambdaFunction: this.createStepFnLambda('lambda_step_readDDB', lambdaRole, layers)
        });
        const priceGreaterThan55_Step = new tasks.LambdaInvoke(this, 'PriceGreaterThan55', {
            lambdaFunction: this.createStepFnLambda('lambda_step_priceGreaterThan55', lambdaRole, layers)
        });
        const priceLessThan55_Step = new tasks.LambdaInvoke(this, 'PriceLessThan55', {
            lambdaFunction: this.createStepFnLambda('lambda_step_priceLessThan55', lambdaRole, layers)
        });
        const priceEquals55_Step = new sfn.Succeed(this, 'PriceIs55');
        const definition = readDynamoDB_Step
            .next(new sfn.Choice(this, 'IsPriceGreaterThan55?')
            .when(sfn.Condition.numberGreaterThan('$.Payload.body.price', 55), priceGreaterThan55_Step)
            .when(sfn.Condition.numberLessThan('$.Payload.body.price', 55), priceLessThan55_Step)
            .otherwise(priceEquals55_Step));
        this.stepFn = new sfn.StateMachine(this, 'StateMachine', {
            definitionBody: sfn.DefinitionBody.fromChainable(definition),
            tracingEnabled: true,
            timeout: aws_cdk_lib_1.Duration.minutes(5)
        });
    }
    createStepFnLambda(lambdaFileName, lambdaRole, lambdalayers) {
        var pythonFn = new pythonlambda.PythonFunction(this, lambdaFileName, {
            entry: './resources/stepfn_lambdas/',
            index: lambdaFileName + '.py',
            handler: 'lambda_handler',
            memorySize: 128,
            runtime: lambda.Runtime.PYTHON_3_9,
            role: lambdaRole,
            layers: lambdalayers,
            tracing: aws_lambda_1.Tracing.ACTIVE
        });
        pythonFn.addEnvironment("AWS_LAMBDA_EXEC_WRAPPER", "/opt/otel-instrument");
        return pythonFn;
    }
}
exports.PetAdoptionsStepFn = PetAdoptionsStepFn;
//# sourceMappingURL=data:application/json;base64,